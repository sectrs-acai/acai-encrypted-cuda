#pragma once

/*
Copyright (c) 2014, Romain Dolbeau, unless otherwise noted.
No claims is made upon work by others.

For the work by Romain Dolbeau:
All rights reserved

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

For the work by others:
See the indicated reference for the relevant license.
*/

#include <inttypes.h>

#include "aes_common.h"

#define GPU_CREATE_ALL

// generate the prototypes for all the functions
// autogenerated in aes_gpu.cu

#define FUNC_AES_FT(fun,T,A,LR,S,COALLD,COALST,PREROUNDS,POSTROUNDS)          \
  __global__ void aes_##fun##_cuda_##T##A##_##LR##_##S##COALLD##COALST( \
                             const uint32_t *all_input,                 \
                             uint32_t *all_output,                      \
                             const uint32_t *aes_edrk,                  \
                             const uint32_t n,                          \
                             const uint32_t* gFT0,                      \
                             const uint32_t* gFT1,                      \
                             const uint32_t* gFT2,                      \
                             const uint32_t* gFT3,                      \
                             const uint32_t* gFSb,                   \
                             const uint32_t* IV);                    \
\

#define FUNC_AES_FT_ALLCOAL(fun,T,A,LR,S,PR,PO)                 \
  FUNC_AES_FT(fun,T,A,LR,S,nocoal,nocoal,PR,PO)                 \
       FUNC_AES_FT(fun,T,A,LR,S,nocoal,coal,PR,PO)              \
       FUNC_AES_FT(fun,T,A,LR,S,coal,nocoal,PR,PO)              \
       FUNC_AES_FT(fun,T,A,LR,S,coal,coal,PR,PO)                \
       FUNC_AES_FT(fun,T,A,LR,S,nocoal,coalshuf,PR,PO)          \
       FUNC_AES_FT(fun,T,A,LR,S,coalshuf,nocoal,PR,PO)          \
       FUNC_AES_FT(fun,T,A,LR,S,coalshuf,coalshuf,PR,PO)

#define FUNC_AES_ALL_FT_PP(T,A,LR,S,PR,PO)      \
  FUNC_AES_FT_ALLCOAL(encrypt,T,A,LR,S,PR,PO)   \
  FUNC_AES_FT_ALLCOAL(ctr,T,A,LR,S,PR,PO)       \
  FUNC_AES_FT_ALLCOAL(gcm,T,A,LR,S,PR,PO)       \
  FUNC_AES_FT_ALLCOAL(gcmnoxor,T,A,LR,S,PR,PO)

#define FUNC_AES_ALL_FT(T,A,LR,S)                      \
  FUNC_AES_ALL_FT_PP(T,A,LR,S,E4,E4)                   \

#include "aes_gpu_impl.h"

/* two-threads-per-block variant, ECB only ATM */

__global__ void aes_encrypt_cuda_half(const uint32_t *all_input,
                                        uint32_t *all_output,
                                        const uint32_t *aes_edrk,
                                        const uint32_t n,
                                        const uint32_t* gFT0,
                                        const uint32_t* gFT1,
                                        const uint32_t* gFT2,
                                        const uint32_t* gFT3,
                                        const uint32_t* gFSb,
                                        const uint32_t* IV);


/* four-threads-per-block variant, ECB only ATM */
/* two-threads-per-block variant, ECB only ATM */
__global__ void aes_encrypt_cuda_quarter(const uint32_t *all_input,
                                         uint32_t *all_output,
                                         const uint32_t *aes_edrk,
                                         const uint32_t n,
                                         const uint32_t* gFT0,
                                         const uint32_t* gFT1,
                                         const uint32_t* gFT2,
                                         const uint32_t* gFT3,
                                         const uint32_t* gFSb,
                                         const uint32_t* IV);